"""
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
"""
import streamlit as st
from state.session import state
import pandas as pd

def navigation_buttons():
    """–ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    col1, col2, col3 = st.columns([1, 3, 1])
    
    with col1:
        if state.get('step', 1) > 1:
            if st.button("‚Üê –ù–∞–∑–∞–¥", use_container_width=True):
                state.set('step', state.get('step', 1) - 1)
                st.rerun()
    
    with col3:
        if state.get('step', 1) == 1:
            valid_selection = (
                state.get('date_col') and 
                state.get('target_col') and 
                state.get('date_col') != state.get('target_col')
            )
            allow_next = valid_selection and state.get('raw_df') is not None

            if allow_next:
                if st.button("–î–∞–ª–µ–µ ‚Üí", type="primary", use_container_width=True):
                    try:
                        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º filtered_df
                        filtered_df = state.get('processed_df')[
                            [state.get('date_col'), state.get('target_col')]
                        ].copy()
                        
                        # –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        state.update({
                            'filtered_df': filtered_df,
                            'original_filtered_df': filtered_df.copy(),
                            'original_missing': state.get('processed_df')[
                                state.get('target_col')
                            ].isnull().copy()
                        })
                        
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã
                        state.get('filtered_df')[state.get('date_col')] = pd.to_datetime(
                            state.get('filtered_df')[state.get('date_col')]
                        )
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        if state.get('date_col') not in state.get('filtered_df').columns:
                            state.set('filtered_df', state.get('filtered_df').reset_index())
                            
                        state.set('step', state.get('step', 1) + 1)
                        st.rerun()
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            else:
                help_msg = ("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–∞—Ç—ã –∏ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π" 
                           if state.get('date_col') == state.get('target_col') 
                           else "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±—Ü—ã")
                st.button("–î–∞–ª–µ–µ ‚Üí", disabled=True, help=help_msg, use_container_width=True)
        
        elif state.get('step', 1) in [2, 3]:
            if st.button("–î–∞–ª–µ–µ ‚Üí", type="primary", use_container_width=True):
                state.set('step', state.get('step', 1) + 1)
                st.rerun()

def sidebar_navigation():
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –≤ —Å–∞–π–¥–±–∞—Ä–µ"""
    with st.sidebar:
        st.title("üìå –ù–∞–≤–∏–≥–∞—Ü–∏—è")
        steps = {
            1: "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö",
            2: "–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö",
            3: "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–±—Ä–æ—Å—ã"
        }
        current_step = state.get('step', 1)  # Default to 1 if None
        allowed_steps = [1]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —à–∞–≥–æ–≤
        if state.get('raw_df') is not None and state.get('date_col') and state.get('target_col'):
            allowed_steps.extend([2, 3])
        
        for step_num, step_name in steps.items():
            status = "‚úÖ" if step_num < current_step else "‚ûñ"
            if step_num == current_step:
                status = "üìç"
            disabled = step_num not in allowed_steps
            btn = st.button(
                f"{status} {step_name}",
                key=f"sidebar_step_{step_num}",
                disabled=disabled,
                use_container_width=True
            )
            if btn and not disabled and step_num != current_step:
                state.set('step', step_num)
                st.rerun() 