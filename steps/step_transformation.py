# steps/step_transformation.py
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from statsmodels.tsa.stattools import adfuller, kpss
from scipy.stats import median_abs_deviation, mstats
from sklearn.ensemble import IsolationForest
from sklearn.cluster import DBSCAN
from sklearn.neighbors import LocalOutlierFactor

def perform_stationarity_tests(series):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –Ω–∞ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç—å"""
    adf_result = adfuller(series.dropna())
    kpss_result = kpss(series.dropna(), regression='c')
    return {
        'ADF Statistic': adf_result[0],
        'ADF p-value': adf_result[1],
        'KPSS Statistic': kpss_result[0],
        'KPSS p-value': kpss_result[1]
    }

def handle_outliers(data, method, replacement_method='median', window_size=5, 
                   interpolation_method='linear', **kwargs):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∑–∞–º–µ–Ω–æ–π
    """
    outliers_mask = pd.Series(False, index=data.index)
    
    # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤
    if method == 'IQR':
        q1 = data.quantile(0.25)
        q3 = data.quantile(0.75)
        iqr = q3 - q1
        threshold = kwargs.get('threshold', 1.5)
        outliers_mask = (data < (q1 - threshold*iqr)) | (data > (q3 + threshold*iqr))
    elif method == 'Z-score':
        threshold = kwargs.get('threshold', 3)
        z = np.abs((data - data.mean()) / data.std())
        outliers_mask = z > threshold
    elif method == 'Isolation Forest':
        model = IsolationForest(
            contamination=kwargs.get('contamination', 0.1),
            random_state=42
        )
        preds = model.fit_predict(data.values.reshape(-1, 1))
        outliers_mask = preds == -1
    elif method == 'DBSCAN':
        model = DBSCAN(
            eps=kwargs.get('eps', 0.5),
            min_samples=kwargs.get('min_samples', 5)
        )
        clusters = model.fit_predict(data.values.reshape(-1, 1))
        outliers_mask = clusters == -1
    elif method == 'LOF':
        lof = LocalOutlierFactor(
            n_neighbors=kwargs.get('n_neighbors', 20),
            contamination=kwargs.get('contamination', 0.1)
        )
        preds = lof.fit_predict(data.values.reshape(-1, 1))
        outliers_mask = preds == -1
    elif method == 'Robust Z-score':
        median = data.median()
        mad = median_abs_deviation(data, scale='normal')
        z_scores = np.abs((data - median) / mad)
        outliers_mask = z_scores > kwargs.get('threshold', 3)
    
    # –ó–∞–º–µ–Ω–∞ –≤—ã–±—Ä–æ—Å–æ–≤
    if replacement_method == 'median':
        return data.mask(outliers_mask, data.median())
    elif replacement_method == 'moving_average':
        rolling_mean = data.rolling(
            window=window_size,
            center=True,
            min_periods=1
        ).mean().ffill().bfill()
        return data.mask(outliers_mask, rolling_mean)
    elif replacement_method == 'interpolation':
        temp = data.mask(outliers_mask, np.nan)
        return temp.interpolate(
            method=interpolation_method,
            limit_direction='both',
            limit_area='inside'
        ).ffill().bfill()
    return data

def run_step():
    st.subheader("–®–∞–≥ 3. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∞–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–æ—Å–æ–≤")
    
    if 'filtered_df' not in st.session_state or st.session_state.filtered_df.empty:
        st.warning("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        return

    if 'trans_initial' not in st.session_state:
        st.session_state.trans_initial = st.session_state.filtered_df.copy()
    
    df = st.session_state.filtered_df.copy()
    date_col = st.session_state.date_col
    target_col = st.session_state.target_col
    
    tab1, tab2 = st.tabs(["üìà –°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç—å", "üìä –í—ã–±—Ä–æ—Å—ã"])
    
    with tab1:
        st.markdown("## üìà –ê–Ω–∞–ª–∏–∑ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞")
        col_original, col_transformed = st.columns([1, 1], gap="large")
        
        with col_original:
            st.markdown("### –ò—Å—Ö–æ–¥–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥")
            fig = px.line(df, x=date_col, y=target_col, height=350,
                        title="–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                        color_discrete_sequence=['#1f77b4'])
            fig.update_layout(margin=dict(t=40, b=20))
            st.plotly_chart(fig, use_container_width=True)
            
            try:
                original_tests = perform_stationarity_tests(df.set_index(date_col)[target_col])
                st.markdown("**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç–∏:**")
                adf_col, kpss_col = st.columns(2)
                with adf_col:
                    with st.container(border=True):
                        st.markdown("##### –¢–µ—Å—Ç –î–∏–∫–∏-–§—É–ª–ª–µ—Ä–∞ (ADF)")
                        st.metric(
                            label="p-value",
                            value=f"{original_tests['ADF p-value']:.4f}",
                            delta="–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–µ–Ω" if original_tests['ADF p-value'] < 0.05 else "–ù–µ—Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–µ–Ω",
                            delta_color="normal" if original_tests['ADF p-value'] < 0.05 else "off"
                        )
                with kpss_col:
                    with st.container(border=True):
                        st.markdown("##### –¢–µ—Å—Ç –ö–ü–°–° (KPSS)")
                        st.metric(
                            label="p-value",
                            value=f"{original_tests['KPSS p-value']:.4f}",
                            delta="–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–µ–Ω" if original_tests['KPSS p-value'] > 0.05 else "–ù–µ—Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–µ–Ω",
                            delta_color="normal" if original_tests['KPSS p-value'] > 0.05 else "off"
                        )
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")

        with col_transformed:
            st.markdown("### –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä—è–¥–∞")
            transform_method = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:",
                ["–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ", "–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ"],
                index=None,
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥...",
                key="transform_select"
            )
            
            if transform_method:
                params = {}
                with st.expander("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è", expanded=True):
                    if transform_method == "–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ":
                        params['order'] = st.number_input(
                            "–ü–æ—Ä—è–¥–æ–∫ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è",
                            min_value=1, max_value=3, value=1,
                            help="–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—á–∏–Ω–∞—Ç—å —Å 1-–≥–æ –ø–æ—Ä—è–¥–∫–∞"
                        )
                    elif transform_method == "–°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ":
                        params['window'] = st.number_input(
                            "–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞",
                            min_value=2, max_value=90, value=7,
                            help="–í—ã–±–∏—Ä–∞–π—Ç–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"
                        )
                
                if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", type="primary"):
                    try:
                        st.session_state.stationarity_initial = st.session_state.filtered_df.copy()
                        ts = st.session_state.stationarity_initial.set_index(date_col)[target_col].copy()
                        
                        if transform_method == "–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ":
                            transformed = ts.diff(params['order']).dropna()
                        elif transform_method == "–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—Ä–æ–≤–∞–Ω–∏–µ":
                            if (ts > 0).all():
                                transformed = np.log(ts)
                            else:
                                st.error("–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ: –µ—Å—Ç—å –Ω–µ–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
                                transformed = ts
                        elif transform_method == "–°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ":
                            transformed = ts.rolling(params['window']).mean().dropna()
                        
                        st.session_state.filtered_df = transformed.reset_index()
                        st.rerun()
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {str(e)}")

            if 'stationarity_initial' in st.session_state:
                if st.button("–û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", type="secondary"):
                    st.session_state.filtered_df = st.session_state.stationarity_initial.copy()
                    del st.session_state.stationarity_initial
                    st.rerun()

    with tab2:
        st.markdown("## üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤")
        
        st.info("""
        **–°–æ–≤–µ—Ç—ã –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:**
        - –î–ª—è –º–µ—Ç–æ–¥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π (DBSCAN, LOF) –º–∞—Å—à—Ç–∞–±–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ
        - Contamination: –¥–æ–ª—è –æ–∂–∏–¥–∞–µ–º—ã—Ö –≤—ã–±—Ä–æ—Å–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö (0.01-0.5)
        - –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞: –≤—ã–±–∏—Ä–∞–π—Ç–µ –Ω–µ—á–µ—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–≥–æ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
        - –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'time' –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ —Å –Ω–µ—Ä–∞–≤–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
        """)

        col_detection, col_replacement = st.columns([1, 1], gap="large")
        
        with col_detection:
            st.markdown("### –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤")
            method = st.selectbox(
                "–ú–µ—Ç–æ–¥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è:",
                ["IQR", "Z-score", "Isolation Forest", "DBSCAN", "LOF", "Robust Z-score"],
                key="outlier_method"
            )
            
            detection_params = {}
            if method in ['IQR', 'Z-score', 'Robust Z-score']:
                detection_params['threshold'] = st.slider(
                    "–ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
                    1.0, 5.0, 3.0 if method == 'Z-score' else 1.5, 0.1,
                    help="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: IQR (1.5-3), Z-score (2.5-3)"
                )
            elif method == 'Isolation Forest':
                detection_params['contamination'] = st.slider(
                    "Contamination",
                    0.01, 0.5, 0.1, 0.01,
                    help="–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ–ª—è –≤—ã–±—Ä–æ—Å–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö"
                )
            elif method == 'DBSCAN':
                detection_params['eps'] = st.slider(
                    "EPS",
                    0.1, 2.0, 0.5, 0.1,
                    help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Å–æ—Å–µ–¥—è–º–∏"
                )
                detection_params['min_samples'] = st.number_input(
                    "Min Samples",
                    1, 20, 5,
                    help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞"
                )
            elif method == 'LOF':
                detection_params['n_neighbors'] = st.number_input(
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–µ–π",
                    5, 50, 20,
                    help="–ë–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ª—É—á—à–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö"
                )
                detection_params['contamination'] = st.slider(
                    "Contamination",
                    0.01, 0.5, 0.1, 0.01
                )

        with col_replacement:
            st.markdown("### –ó–∞–º–µ–Ω–∞ –≤—ã–±—Ä–æ—Å–æ–≤")
            replacement_method = st.selectbox(
                "–°–ø–æ—Å–æ–± –∑–∞–º–µ–Ω—ã:",
                ["median", "moving_average", "interpolation"],
                format_func=lambda x: {
                    "median": "–ú–µ–¥–∏–∞–Ω–∞",
                    "moving_average": "–°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ",
                    "interpolation": "–ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è"
                }[x],
                key="replacement_method"
            )
            
            replacement_params = {}
            if replacement_method == 'moving_average':
                replacement_params['window_size'] = st.number_input(
                    "–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞",
                    min_value=3,
                    max_value=31,
                    value=7,
                    step=2,
                    help="–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ—á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–≥–æ –æ–∫–Ω–∞"
                )
            elif replacement_method == 'interpolation':
                replacement_params['interpolation_method'] = st.selectbox(
                    "–ú–µ—Ç–æ–¥ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏",
                    ['linear', 'time', 'quadratic', 'cubic'],
                    format_func=lambda x: {
                        'linear': '–õ–∏–Ω–µ–π–Ω–∞—è',
                        'time': '–í—Ä–µ–º–µ–Ω–Ω–∞—è',
                        'quadratic': '–ö–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è',
                        'cubic': '–ö—É–±–∏—á–µ—Å–∫–∞—è'
                    }[x],
                    key="interpolation_method",
                    help="'time' —É—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –Ω–∞–±–ª—é–¥–µ–Ω–∏—è–º–∏"
                )

            if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ü–∏—é", key="apply_outliers"):
                try:
                    st.session_state.outliers_initial = st.session_state.filtered_df.copy()
                    df = st.session_state.outliers_initial.copy()
                    
                    df[target_col] = handle_outliers(
                        df[target_col],
                        method=method,
                        replacement_method=replacement_method,
                        window_size=replacement_params.get('window_size', 5),
                        interpolation_method=replacement_params.get('interpolation_method', 'linear'),
                        **detection_params
                    )
                    
                    st.session_state.filtered_df = df.copy()
                    st.rerun()
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")

            if 'outliers_initial' in st.session_state:
                if st.button("–û—Ç–º–µ–Ω–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—ã–±—Ä–æ—Å–æ–≤", type="secondary"):
                    st.session_state.filtered_df = st.session_state.outliers_initial.copy()
                    del st.session_state.outliers_initial
                    st.rerun()

        st.markdown("---")
        st.markdown("### –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
        period = st.selectbox(
            "–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:",
            ["–î–µ–Ω—å", "–ù–µ–¥–µ–ª—è", "–ú–µ—Å—è—Ü", "–ì–æ–¥"],
            index=2,
            key="period_select"
        )
        
        try:
            freq_map = {"–î–µ–Ω—å": "D", "–ù–µ–¥–µ–ª—è": "W", "–ú–µ—Å—è—Ü": "M", "–ì–æ–¥": "Y"}
            grouped = df.groupby(pd.Grouper(key=date_col, freq=freq_map[period]))
            
            fig = go.Figure()
            for name, group in grouped:
                if not group.empty:
                    fig.add_trace(go.Box(
                        y=group[target_col],
                        name=name.strftime('%Y-%m-%d'),
                        boxpoints='outliers'
                    ))
            
            fig.update_layout(
                height=400,
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º",
                margin=dict(l=20, r=20, t=40, b=20)
            )
            st.plotly_chart(fig, use_container_width=True)
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")

    if st.button("‚è™ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ —à–∞–≥–∞", key="reset_all"):
        st.session_state.filtered_df = st.session_state.trans_initial.copy()
        st.rerun()