import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np

def load_data(uploaded_file):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    if uploaded_file.name.endswith('.csv'):
        df = pd.read_csv(uploaded_file)
    else:
        df = pd.read_excel(uploaded_file)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤—ã–π
    if (not st.session_state.current_file or 
        uploaded_file.file_id != st.session_state.current_file.file_id):
        date_col = None
        target_col = None
    else:
        date_col = st.session_state.date_col
        target_col = st.session_state.target_col

    
    st.session_state.update({
        'raw_df': df.copy(),
        'processed_df': df.copy(),
        'original_columns': df.columns.tolist(),
        'current_columns': df.columns.tolist().copy(),
        'temp_columns': df.columns.tolist().copy(),
        'current_file': uploaded_file,
        'date_col': date_col,
        'target_col': target_col
    })

def show_data_preview():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
    st.subheader("üìù –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é DataFrame —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–æ–ª–æ–Ω–æ–∫
    preview_df = st.session_state.processed_df.copy()[:1000]
    preview_df.columns = st.session_state.current_columns
    
    st.dataframe(
        preview_df,
        use_container_width=True
    )

def show_select_cols_tab():
    """–í–∫–ª–∞–¥–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏ –∑–∞–≤–∏—Å–∏–º–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    st.subheader("üìå –í—ã–±–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
    if st.session_state.processed_df is not None:
        col1, col2 = st.columns([1, 3])
        
        with col1:
            # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ session_state
            current_date_col = st.session_state.date_col or st.session_state.current_columns[0]
            current_target_col = st.session_state.target_col or st.session_state.current_columns[-1]

            # –í—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–∞ —Å –¥–∞—Ç–æ–π
            new_date_col = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü —Å –¥–∞—Ç–æ–π",
                options=st.session_state.current_columns,
                index=st.session_state.current_columns.index(current_date_col),
                key="date_col_selector"
            )
            
            # –í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            new_target_col = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü —Å –∑–∞–≤–∏—Å–∏–º–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π",
                options=[c for c in st.session_state.current_columns if c != new_date_col],
                index=0,
                key="target_col_selector"
            )
            
            # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if new_date_col != st.session_state.date_col:
                st.session_state.date_col = new_date_col
                st.session_state.original_missing = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã
                # –°–±—Ä–æ—Å —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã
                if new_target_col == new_date_col:
                    st.session_state.target_col = None
                    st.session_state.original_missing = st.session_state.processed_df[new_target_col].isnull().to_numpy().copy()
            
            if new_target_col != st.session_state.target_col:
                st.session_state.target_col = new_target_col
                st.session_state.original_missing = st.session_state.processed_df[new_target_col].isnull().to_numpy().copy()
                
        with col2:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±–∞ —Å—Ç–æ–ª–±—Ü–∞ –≤—ã–±—Ä–∞–Ω—ã
            if st.session_state.date_col and st.session_state.target_col:
                try:
                    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    plot_df = st.session_state.processed_df.copy()
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É
                    plot_df[st.session_state.date_col] = pd.to_datetime(
                        plot_df[st.session_state.date_col]
                       , dayfirst=True
                       , format='mixed'
                    )
                    
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
                    plot_df = plot_df.sort_values(st.session_state.date_col)
                    
                    fig = px.line(
                        plot_df,
                        x=st.session_state.date_col,
                        y=st.session_state.target_col,
                        title=f"–î–∏–Ω–∞–º–∏–∫–∞ {st.session_state.target_col}",
                        labels={
                            st.session_state.date_col: "–î–∞—Ç–∞",
                            st.session_state.target_col: "–ó–Ω–∞—á–µ–Ω–∏–µ"
                        }
                    )
                    
                    fig.update_layout(
                        hovermode="x unified",
                        showlegend=False,
                        margin=dict(l=20, r=20, t=40, b=20)
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
                
                except Exception as e:
                    st.error(f"üö® –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")
            else:
                st.info("üëâ –í—ã–±–µ—Ä–∏—Ç–µ –æ–±–∞ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
    else:
        st.warning("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

def manual_rename_interface():
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤"""
    st.subheader("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–æ—Ä –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    if not st.session_state.temp_columns:
        st.session_state.temp_columns = st.session_state.current_columns.copy()

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
    col1, col2 = st.columns(2)
    with col1:
        st.markdown("**–ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ**")
    with col2:
        st.markdown("**–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ**")

    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã –Ω–∞–∑–≤–∞–Ω–∏–π
    temp_names = []
    for i, orig_col in enumerate(st.session_state.current_columns):
        row_cols = st.columns(2)
        with row_cols[0]:
            st.code(orig_col)
        with row_cols[1]:
            new_name = st.text_input(
                label=f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {orig_col}",
                value=st.session_state.temp_columns[i],
                key=f"col_rename_{i}",
                label_visibility="collapsed"
            )
            temp_names.append(new_name.strip())
    
    st.session_state.temp_columns = temp_names

    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    btn_col1, btn_col2, btn_col3 = st.columns([1, 2, 1])
    with btn_col1:
        reset_btn = st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω—ã–º", use_container_width=True)

    with btn_col3:
        apply_btn = st.button("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è", use_container_width=True)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if apply_btn:
        handle_apply_changes()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—Å–∞
    if reset_btn:
        handle_reset_columns()
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        
    if 'rename_messages' in st.session_state:
        msg = st.session_state.rename_messages
        if msg['type'] == 'error':
            for m in msg['content']:
                st.error(m)
        elif msg['type'] == 'success':
            st.success(msg['content'])
        elif msg['type'] == 'info':
            st.info(msg['content'])
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞
        del st.session_state.rename_messages

def handle_apply_changes():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    error_messages = []
    new_columns = st.session_state.temp_columns
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    if any(name == "" for name in new_columns):
        error_messages.append("üö´ –ù–∞–∑–≤–∞–Ω–∏—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏!")
    if len(set(new_columns)) != len(new_columns):
        error_messages.append("üö´ –ù–∞–∑–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏!")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ session_state
    if error_messages:
        st.session_state.rename_messages = {'type': 'error', 'content': error_messages}
    else:
        if new_columns == st.session_state.current_columns:
            st.session_state.rename_messages = {'type': 'info', 'content': "‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è"}
        else:
            st.session_state.current_columns = new_columns
            st.session_state.processed_df.columns = new_columns
            st.session_state.rename_messages = {'type': 'success', 'content': "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!"}
        
        st.session_state.temp_columns = new_columns.copy()
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π
    st.rerun()


def handle_reset_columns():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    st.session_state.temp_columns = st.session_state.original_columns.copy()
    st.session_state.current_columns = st.session_state.original_columns.copy()
    st.session_state.processed_df.columns = st.session_state.original_columns
    st.success("üîÑ –ù–∞–∑–≤–∞–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∏—Å—Ö–æ–¥–Ω—ã–º!")



def run_step():
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –µ—Å—Ç—å
    uploaded_file = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö (CSV/Excel)", 
        type=["csv", "xlsx"],
        key="file_uploader"
    ) or st.session_state.get('current_file') 
    
    if uploaded_file:
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–ª–∏ —Ñ–∞–π–ª –∏–∑–º–µ–Ω–µ–Ω
            if (st.session_state.raw_df is None or 
                uploaded_file.file_id != st.session_state.current_file.file_id):
                load_data(uploaded_file)
                st.rerun()
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
            tab1, tab2, tab3 = st.tabs(["–î–∞–Ω–Ω—ã–µ", "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–í—ã–±–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"])
            
            with tab1:
                show_data_preview()
            
            with tab2:
                manual_rename_interface()
        
            with tab3:
                show_select_cols_tab()

        except Exception as e:
            st.error(f"üö® –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
    else:
        if st.session_state.raw_df is not None:
            st.session_state.raw_df = None
            st.session_state.processed_df = None
            st.session_state.current_file = None
            st.rerun()
        
        st.info("üëÜ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")