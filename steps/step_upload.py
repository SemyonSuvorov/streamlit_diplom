# steps/step_upload.py
import streamlit as st
import pandas as pd
import plotly.express as px

def load_data(uploaded_file):
    if uploaded_file.name.endswith('.csv'):
        df = pd.read_csv(uploaded_file)
    else:
        df = pd.read_excel(uploaded_file)
    
    if (not st.session_state.current_file or 
        uploaded_file.file_id != st.session_state.current_file.file_id):
        date_col = None
        target_col = None
    else:
        date_col = st.session_state.date_col
        target_col = st.session_state.target_col

    st.session_state.update({
        'raw_df': df.copy(),
        'processed_df': df.copy(),
        'original_columns': df.columns.tolist(),
        'current_columns': df.columns.tolist().copy(),
        'temp_columns': df.columns.tolist().copy(),
        'current_file': uploaded_file,
        'date_col': date_col,
        'target_col': target_col
    })

def show_data_preview():
    st.subheader("üìù –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
    preview_df = st.session_state.processed_df.copy()[:1000]
    preview_df.columns = st.session_state.current_columns
    st.dataframe(preview_df, use_container_width=True)

def show_select_cols_tab():
    st.subheader("üìå –í—ã–±–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
    if st.session_state.processed_df is not None:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        current_columns = st.session_state.current_columns
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è date_col
        if st.session_state.date_col not in current_columns:
            st.session_state.date_col = current_columns[0] if current_columns else None
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è target_col
        available_targets = [c for c in current_columns if c != st.session_state.date_col]
        if st.session_state.target_col not in available_targets:
            st.session_state.target_col = available_targets[0] if available_targets else None

        col1, col2 = st.columns([1, 3])
        with col1:
            new_date_col = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü —Å –¥–∞—Ç–æ–π",
                options=current_columns,
                index=current_columns.index(st.session_state.date_col),
                key="date_col_selector"
            )
            
            available_targets = [c for c in current_columns if c != new_date_col]
            new_target_col = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü —Å –∑–∞–≤–∏—Å–∏–º–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π",
                options=available_targets,
                index=available_targets.index(st.session_state.target_col) if st.session_state.target_col in available_targets else 0,
                key="target_col_selector"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            if new_date_col != st.session_state.date_col:
                st.session_state.date_col = new_date_col
                st.session_state.target_col = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–∞—Ç—ã
            
            if new_target_col != st.session_state.target_col:
                st.session_state.target_col = new_target_col
        with col2:
            if st.session_state.date_col and st.session_state.target_col:
                try:
                    plot_df = st.session_state.processed_df.copy()
                    plot_df[st.session_state.date_col] = pd.to_datetime(plot_df[st.session_state.date_col], dayfirst=True, format='mixed')
                    plot_df = plot_df.sort_values(st.session_state.date_col)
                    fig = px.line(
                        plot_df,
                        x=st.session_state.date_col,
                        y=st.session_state.target_col,
                        title=f"–î–∏–Ω–∞–º–∏–∫–∞ {st.session_state.target_col}",
                        labels={st.session_state.date_col: "–î–∞—Ç–∞", st.session_state.target_col: "–ó–Ω–∞—á–µ–Ω–∏–µ"}
                    )
                    fig.update_layout(hovermode="x unified", showlegend=False, margin=dict(l=20, r=20, t=40, b=20))
                    st.plotly_chart(fig, use_container_width=True)
                except Exception as e:
                    st.error(f"üö® –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")
            else:
                st.info("üëâ –í—ã–±–µ—Ä–∏—Ç–µ –æ–±–∞ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")

def manual_rename_interface():
    st.subheader("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–æ—Ä –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤")
    if not st.session_state.temp_columns:
        st.session_state.temp_columns = st.session_state.current_columns.copy()

    col1, col2 = st.columns(2)
    with col1:
        st.markdown("**–ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ**")
    with col2:
        st.markdown("**–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ**")

    temp_names = []
    for i, orig_col in enumerate(st.session_state.current_columns):
        row_cols = st.columns(2)
        with row_cols[0]:
            st.code(orig_col)
        with row_cols[1]:
            new_name = st.text_input(
                label=f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {orig_col}",
                value=st.session_state.temp_columns[i],
                key=f"col_rename_{i}",
                label_visibility="collapsed"
            )
            temp_names.append(new_name.strip())
    
    st.session_state.temp_columns = temp_names

    btn_col1, btn_col2, btn_col3 = st.columns([1, 2, 1])
    with btn_col1:
        reset_btn = st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω—ã–º", use_container_width=True)
    with btn_col3:
        apply_btn = st.button("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è", use_container_width=True)

    if apply_btn:
        error_messages = []
        new_columns = st.session_state.temp_columns
        if any(name == "" for name in new_columns):
            error_messages.append("üö´ –ù–∞–∑–≤–∞–Ω–∏—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏!")
        if len(set(new_columns)) != len(new_columns):
            error_messages.append("üö´ –ù–∞–∑–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏!")

        if error_messages:
            st.error("\n".join(error_messages))
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è date_col –∏ target_col
            rename_mapping = dict(zip(st.session_state.original_columns, new_columns))
            if st.session_state.date_col in rename_mapping:
                st.session_state.date_col = rename_mapping[st.session_state.date_col]
            if st.session_state.target_col in rename_mapping:
                st.session_state.target_col = rename_mapping[st.session_state.target_col]
            
            st.session_state.current_columns = new_columns
            st.session_state.processed_df.columns = new_columns
            st.success("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")
            st.rerun()
            
    if reset_btn:
        st.session_state.temp_columns = st.session_state.original_columns.copy()
        st.session_state.current_columns = st.session_state.original_columns.copy()
        st.session_state.processed_df.columns = st.session_state.original_columns
        st.success("üîÑ –ù–∞–∑–≤–∞–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∏—Å—Ö–æ–¥–Ω—ã–º!")
        st.rerun()

def run_step():
    uploaded_file = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö (CSV/Excel)", 
        type=["csv", "xlsx"],
        key="file_uploader"
    ) or st.session_state.get('current_file') 
    
    if uploaded_file:
        try:
            if (st.session_state.raw_df is None or 
                uploaded_file.file_id != st.session_state.current_file.file_id):
                load_data(uploaded_file)
                st.rerun()
            
            tab1, tab2, tab3 = st.tabs(["–î–∞–Ω–Ω—ã–µ", "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–í—ã–±–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"])
            
            with tab1:
                show_data_preview()
            with tab2:
                manual_rename_interface()
            with tab3:
                show_select_cols_tab()

        except Exception as e:
            st.error(f"üö® –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
    else:
        st.info("üëÜ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")