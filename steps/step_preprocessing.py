# steps/step_preprocessing.py
import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from state.session import state
from services.preprocessing_service import PreprocessingService
from services.data_service import DataService
from components.charts import create_time_series_plot, create_stl_plot, create_box_plot, create_histogram
from config import PREPROCESSING_CONFIG

def show_data_description():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    st.write("### üìä –û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    info_container = st.container(border=True)
    with info_container:
        cols = st.columns(4)
        with cols[0]:
            st.metric("–°—Ç–æ–ª–±—Ü–æ–≤", len(state.get('filtered_df').columns))
        with cols[1]:
            st.metric("–ù–∞–±–ª—é–¥–µ–Ω–∏–π", len(state.get('filtered_df')))
        with cols[2]:
            st.metric("–ü—Ä–æ–ø—É—Å–∫–æ–≤", state.get('filtered_df').isnull().sum().sum())
        with cols[3]:
            st.metric("–î—É–±–ª–∏–∫–∞—Ç—ã", state.get('filtered_df').duplicated().sum())

    if state.get('target_col') in state.get('filtered_df').select_dtypes(include='number'):
        stats = state.get('filtered_df')[state.get('target_col')].agg([
            'mean', 'median', 'std', 'min', 'max', 'skew'
        ]).reset_index()
        stats.columns = ['–ú–µ—Ç—Ä–∏–∫–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ']
        stats['–ú–µ—Ç—Ä–∏–∫–∞'] = [
            '–°—Ä–µ–¥–Ω–µ–µ', '–ú–µ–¥–∏–∞–Ω–∞', '–°—Ç–∞–Ω–¥. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ', 
            '–ú–∏–Ω–∏–º—É–º', '–ú–∞–∫—Å–∏–º—É–º', '–ê—Å–∏–º–º–µ—Ç—Ä–∏—è'
        ]
        stats['–ó–Ω–∞—á–µ–Ω–∏–µ'] = stats['–ó–Ω–∞—á–µ–Ω–∏–µ'].apply(
            lambda x: f"{x:,.2f}" if isinstance(x, (int, float)) else x
        )
        
        cols = st.columns([1, 2])
        with cols[0]:
            st.markdown("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π:**")
            st.dataframe(stats, use_container_width=True, height=250)
        with cols[1]:
            try:
                fig = create_histogram(
                    state.get('filtered_df'),
                    x_col=state.get('target_col'),
                    title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {state.get('target_col')}",
                    nbins=50
                )
                st.plotly_chart(fig, use_container_width=True)
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã: {str(e)}")

    st.markdown("---")
    st.markdown("**‚è∞ –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫**")
    time_container = st.container(border=True)
    with time_container:
        dates = pd.to_datetime(state.get('filtered_df')[state.get('date_col')])
        cols = st.columns(4)
        with cols[0]:
            st.metric("–ü–µ—Ä–≤–∞—è –¥–∞—Ç–∞", dates.min().strftime('%d.%m.%Y'))
        with cols[1]:
            st.metric("–ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞", dates.max().strftime('%d.%m.%Y'))
        with cols[2]:
            delta = dates.max() - dates.min()
            st.metric("–ü–µ—Ä–∏–æ–¥ –ø–æ–∫—Ä—ã—Ç–∏—è", f"{delta.days} –¥–Ω–µ–π")
        with cols[3]:
            freq = pd.infer_freq(dates)
            freq_map = {'D': '–î–Ω–µ–≤–Ω–∞—è', 'ME': '–ú–µ—Å—è—á–Ω–∞—è', 'Y': '–ì–æ–¥–æ–≤–∞—è', 'H': '–ü–æ—á–∞—Å–æ–≤–∞—è', None: '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}
            state.set('freq', freq)
            st.metric("–ß–∞—Å—Ç–æ—Ç–∞", freq_map.get(freq, freq))
            
        try:
            full_range = pd.date_range(start=dates.min(), end=dates.max(), freq=freq)
            missing = full_range.difference(dates)
            st.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(missing)} –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫") if len(missing) > 0 else st.success("–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        except:
            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞")

def show_missing_values_tab():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤"""
    st.write("### üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
    if state.get('original_missing') is None:
        state.set('original_missing', None)

    if state.get('filtered_df') is not None:
        plot_df = state.get('filtered_df').copy()
        date_col = state.get('date_col')
        target_col = state.get('target_col')

        try:
            plot_df[date_col] = pd.to_datetime(plot_df[date_col])
            plot_df = plot_df.sort_values(date_col)
            
            if state.get('original_missing') is None:
                state.set('original_missing', plot_df[target_col].isna().copy())
            
            fig = create_time_series_plot(
                plot_df,
                x_col=date_col,
                y_col=target_col,
                title=f"–î–∏–Ω–∞–º–∏–∫–∞ {target_col}"
            )
            
            filled_mask = state.get('original_missing') & ~plot_df[target_col].isna()
            current_missing = plot_df[target_col].isna()

            if filled_mask.any():
                fig.add_trace(go.Scatter(
                    x=plot_df[date_col][filled_mask],
                    y=plot_df[target_col][filled_mask],
                    mode='markers',
                    marker=dict(color='red', size=6, line=dict(width=1, color='darkred')),
                    name='–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∏',
                    hoverinfo='y'
                ))

            fig.update_layout(hovermode="x unified", height=500, showlegend=True)
            st.plotly_chart(fig, use_container_width=True)
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")

    st.write("### üïí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏")
    with st.expander("‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫", expanded=True):
        if state.get('filtered_df')[state.get('date_col')].duplicated().any():
            st.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –¥–∞—Ç!")
            agg_strategy = st.radio(
                "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è:",
                options=['mean', 'last', 'first', 'sum', 'max', 'min'],
                format_func=lambda x: {
                    'mean': '–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ',
                    'last': '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', 
                    'first': '–ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ',
                    'sum': '–°—É–º–º–∞ –∑–Ω–∞—á–µ–Ω–∏–π',
                    'max': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ',
                    'min': '–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ'
                }[x],
                horizontal=True
            )
            
            if st.button("–£—Å—Ç—Ä–∞–Ω–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã"):
                dedup_df = PreprocessingService.handle_duplicates(
                    state.get('filtered_df'),
                    state.get('date_col'),
                    state.get('target_col'),
                    strategy=agg_strategy
                )
                keep_cols = [state.get('date_col'), state.get('target_col')]
                state.set('filtered_df', dedup_df[keep_cols])
                st.rerun()
        else:
            st.info("–î—É–±–ª–∏–∫–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")

    with st.expander("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞", expanded=True):
        try:
            dates = pd.to_datetime(state.get('filtered_df')[state.get('date_col')])
            full_range = pd.date_range(start=dates.min(), end=dates.max(), freq=state.get('freq'))
            missing_dates = full_range.difference(dates)
            
            if len(missing_dates) > 0:
                st.markdown(f"**–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–∞—Ç:** {len(missing_dates)}")                
                if st.button("–î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞—Ç—ã"):
                    state.set('filtered_df', PreprocessingService.add_missing_dates(
                        state.get('filtered_df'),
                        state.get('date_col'),
                        state.get('target_col'),
                        freq=state.get('freq')
                    ))
                    st.rerun()
            else:
                st.info("–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞: {str(e)}")

    st.write("### üß© –ú–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –∑–Ω–∞—á–µ–Ω–∏–π")
    missing_count = state.get('filtered_df')[state.get('target_col')].isna().sum()
    if missing_count > 0:
        st.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {missing_count} –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π")
        def apply_fill_method(method):
            if state.get('initial_preprocessing_state') is None:
                state.set('initial_preprocessing_state', state.get('filtered_df').copy())
            state.set('filtered_df', PreprocessingService.handle_missing_values(
                state.get('filtered_df'),
                state.get('target_col'),
                method=method
            ))
            st.rerun()

        cols = st.columns(2)
        with cols[0]:
            st.markdown("**–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã:**")
            auto_method = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥:",
                options=['linear', 'time', 'ffill', 'bfill', 'mean'],
                format_func=lambda x: {
                    'linear': '–õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è',
                    'time': '–í—Ä–µ–º–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è',
                    'ffill': '–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–º',
                    'bfill': '–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏–º',
                    'mean': '–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ'
                }[x]
            )
            if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ"):
                apply_fill_method(auto_method)

        with cols[1]:
            st.markdown("**–†—É—á–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ:**")
            manual_value = st.number_input("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è", value=0.0)
            if st.button("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º"):
                apply_fill_method('zero')
    else:
        st.success("–ü—Ä–æ–ø—É—Å–∫–∏ –≤ –∑–Ω–∞—á–µ–Ω–∏—è—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

    if st.button("‚è™ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º"):
        state.set('filtered_df', state.get('initial_preprocessing_state').copy())
        state.set('original_missing', state.get('initial_preprocessing_state')[state.get('target_col')].isna().copy())
        st.rerun()

def show_stl_decomposition():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ STL-–¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏"""
    st.write("### üìâ STL-–î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞")
    try:
        df = state.get('filtered_df').copy()
        date_col = state.get('date_col')
        target_col = state.get('target_col')

        df[date_col] = pd.to_datetime(df[date_col])
        temp_df = df.set_index(date_col).copy()
        
        FREQ_TO_PERIOD = {'D': 7, 'W': 52, 'ME': 12, 'Q': 4, 'Y': 1, 'H': 24, None: None}
        if state.get('freq') is None:
            try:
                inferred_freq = pd.infer_freq(temp_df.index)
                state.set('freq', inferred_freq[0] if inferred_freq else None)
            except:
                state.set('freq', None)

        if not state.get('freq') or state.get('freq') not in FREQ_TO_PERIOD:
            with st.expander("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏", expanded=True):
                cols = st.columns(2)
                with cols[0]:
                    new_freq = st.selectbox("–ß–∞—Å—Ç–æ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:", options=['D', 'W', 'ME', 'Q', 'Y', 'H'], index=0)
                with cols[1]:
                    default_period = FREQ_TO_PERIOD[new_freq]
                    custom_period = st.number_input(
                        "–ü–µ—Ä–∏–æ–¥ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏:",
                        value=default_period if default_period else 1,
                        min_value=1,
                        step=1
                    )
                if st.button("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"):
                    state.set('freq', new_freq)
                    FREQ_TO_PERIOD[new_freq] = custom_period
                    st.rerun()
            st.stop()

        seasonal_period = FREQ_TO_PERIOD[state.get('freq')]
        if not seasonal_period:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–µ—Ä–∏–æ–¥ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏")
            st.stop()

        with st.expander("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã STL", expanded=True):
            cols = st.columns(3)
            with cols[0]:
                seasonal_smoothing = st.number_input("–°–µ–∑–æ–Ω–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ", value=7, min_value=3, step=2)
            with cols[1]:
                trend_smoothing = st.number_input("–¢—Ä–µ–Ω–¥–æ–≤–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ", value=13, min_value=3, step=2)
            with cols[2]:
                min_low_pass = seasonal_period + (1 if seasonal_period%2 == 0 else 2)
                low_pass_smoothing = st.number_input("–ù–∏–∑–∫–æ—á–∞—Å—Ç–æ—Ç–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ", value=min_low_pass, min_value=min_low_pass, step=2)

        decomposition_type = st.radio("–¢–∏–ø –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏:", ["additive", "multiplicative"], horizontal=True)

        components = PreprocessingService.perform_stl_decomposition(
            df,
            target_col,
            seasonal_period,
            seasonal_smoothing=seasonal_smoothing,
            trend_smoothing=trend_smoothing,
            low_pass_smoothing=low_pass_smoothing,
            decomposition_type=decomposition_type
        )

        fig = create_stl_plot(components)
        st.plotly_chart(fig, use_container_width=True)

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏: {str(e)}")

def run_step():
    """–ó–∞–ø—É—Å–∫ —à–∞–≥–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    st.subheader("–®–∞–≥ 2. –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    if state.get('filtered_df') is None:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ")
        return
        
    if state.get('initial_preprocessing_state') is None:
        state.set('initial_preprocessing_state', state.get('filtered_df').copy())

    tab1, tab2, tab3 = st.tabs(["–û–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤", "–î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞"])
    
    with tab1:
        show_data_description()
    with tab2:
        show_missing_values_tab()
    with tab3:
        show_stl_decomposition()