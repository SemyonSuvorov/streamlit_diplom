import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np

def run_step():
    st.subheader("–®–∞–≥ 2. –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    if st.session_state.filtered_df is not None:
        tab1, tab2, tab3 = st.tabs(["–û–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤", "–±–ª–∞ –±–ª–∞ –±–ª–∞"])
        
        with tab1:
            
            st.write("### üìä –û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö
            st.markdown("**–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:**")
            info_container = st.container(border=True)
            with info_container:
                cols = st.columns(4)
                with cols[0]:
                    st.metric("–°—Ç–æ–ª–±—Ü–æ–≤", len(st.session_state.filtered_df.columns))
                with cols[1]:
                    st.metric("–ù–∞–±–ª—é–¥–µ–Ω–∏–π", len(st.session_state.filtered_df))
                with cols[2]:
                    st.metric("–ü—Ä–æ–ø—É—Å–∫–æ–≤", st.session_state.filtered_df.isnull().sum().sum())
                with cols[3]:
                    st.metric("–î—É–±–ª–∏–∫–∞—Ç—ã", st.session_state.filtered_df.duplicated().sum())

            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
            if st.session_state.target_col in st.session_state.filtered_df.select_dtypes(include='number'):
                st.markdown("---")
                
                stats = st.session_state.filtered_df[st.session_state.target_col].agg([
                    'mean', 'median', 'std', 'min', 'max', 'skew'
                ]).reset_index()
                
                stats.columns = ['–ú–µ—Ç—Ä–∏–∫–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ']
                stats['–ú–µ—Ç—Ä–∏–∫–∞'] = [
                    '–°—Ä–µ–¥–Ω–µ–µ', '–ú–µ–¥–∏–∞–Ω–∞', '–°—Ç–∞–Ω–¥. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ', 
                    '–ú–∏–Ω–∏–º—É–º', '–ú–∞–∫—Å–∏–º—É–º', '–ê—Å–∏–º–º–µ—Ç—Ä–∏—è'
                ]
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
                stats['–ó–Ω–∞—á–µ–Ω–∏–µ'] = stats['–ó–Ω–∞—á–µ–Ω–∏–µ'].apply(
                    lambda x: f"{x:,.2f}" if isinstance(x, (int, float)) else x
                )
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –¥–≤—É—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö
                cols = st.columns([1, 2])
                with cols[0]:
                    st.markdown("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π:**")
                    st.dataframe(
                        stats,
                        use_container_width=True,
                        hide_index=True,
                        height=250
                    )
                
                with cols[1]:
                    try:
                        st.markdown("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π:**")
                        fig = px.histogram(
                            st.session_state.filtered_df,
                            x=st.session_state.target_col,
                            nbins=50,
                            height=320
                        )
                        st.plotly_chart(fig, use_container_width=True)
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã: {str(e)}")

            # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã
            st.markdown("---")
            st.markdown("**‚è∞ –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫**")
            time_container = st.container(border=True)
            with time_container:
                if pd.api.types.is_datetime64_any_dtype(st.session_state.filtered_df[st.session_state.date_col]):
                    dates = st.session_state.filtered_df[st.session_state.date_col]
                    
                    cols = st.columns(4)
                    with cols[0]:
                        st.metric("–ü–µ—Ä–≤–∞—è –¥–∞—Ç–∞", dates.min().strftime('%d.%m.%Y'))
                    with cols[1]:
                        st.metric("–ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞", dates.max().strftime('%d.%m.%Y'))
                    with cols[2]:
                        delta = dates.max() - dates.min()
                        st.metric("–ü–µ—Ä–∏–æ–¥ –ø–æ–∫—Ä—ã—Ç–∏—è", f"{delta.days} –¥–Ω–µ–π")
                    with cols[3]:
                        freq = pd.infer_freq(dates)
                        freq_map = {
                            'D': '–î–Ω–µ–≤–Ω–∞—è',
                            'M': '–ú–µ—Å—è—á–Ω–∞—è',
                            'Y': '–ì–æ–¥–æ–≤–∞—è',
                            'H': '–ü–æ—á–∞—Å–æ–≤–∞—è',
                            None: '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'
                        }
                        st.metric("–ß–∞—Å—Ç–æ—Ç–∞", freq_map.get(freq, freq))
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –¥–∞—Ç
                    try:
                        full_range = pd.date_range(start=dates.min(), end=dates.max(), freq=freq)
                        missing = full_range.difference(dates)
                        st.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(missing)} –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫") if len(missing) > 0 else st.success("–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                    except:
                        st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞")
                      
        with tab2:
            st.write("### üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")

            if st.session_state.original_missing is not None:
                plot_df = st.session_state.filtered_df.copy()
                date_col = st.session_state.date_col
                target_col = st.session_state.target_col
                
                try:
                    plot_df[date_col] = pd.to_datetime(plot_df[date_col])
                    plot_df = plot_df.sort_values(date_col)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∏
                    plot_df['filled'] = np.where(
                        st.session_state.original_missing & ~plot_df[target_col].isna(),
                        plot_df[target_col],
                        np.nan
                    )
                    
                    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
                    fig = px.line(
                        plot_df,
                        x=date_col,
                        y=target_col,
                        title=f"–î–∏–Ω–∞–º–∏–∫–∞ {target_col}",
                        labels={date_col: "–î–∞—Ç–∞", target_col: "–ó–Ω–∞—á–µ–Ω–∏–µ"},
                        line_shape='linear',
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                    if not plot_df['filled'].isna().all():
                        fig.add_trace(go.Scatter(
                            x=plot_df[date_col],
                            y=plot_df['filled'],
                            mode='markers',
                            marker=dict(
                                color='red',
                                size=6,
                                line=dict(width=1, color='darkred')
                            ),
                            name='–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∏',
                            hoverinfo='y'
                        ))
                    
                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–µ–≥–µ–Ω–¥—ã
                    fig.update_layout(
                        hovermode="x unified",
                        legend=dict(
                            orientation="h",
                            yanchor="bottom",
                            y=1.02,
                            xanchor="right",
                            x=1
                        ),
                        margin=dict(l=20, r=20, t=40, b=20),
                        height=500
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")

            # –û–±—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            total_missing = st.session_state.filtered_df[st.session_state.target_col].isnull().sum()
            st.markdown(f"**–¢–µ–∫—É—â–∏–µ –ø—Ä–æ–ø—É—Å–∫–∏:** `{total_missing}`")
            
            # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
            if st.session_state.preprocessing_history:
                if st.button("‚è™ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
                    st.session_state.filtered_df = st.session_state.original_filtered_df.copy()
                    st.session_state.preprocessing_history = [st.session_state.original_filtered_df.copy()]
                    st.rerun()

            # –ú–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
            st.write("### üß© –ú–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤")
            target_column = st.session_state.target_col
            
            def apply_method(method_func):
                """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ—Ç–æ–¥–æ–≤"""
                try:
                    # –°–±—Ä–æ—Å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
                    current_df = st.session_state.original_filtered_df.copy()
                    
                    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞
                    processed = method_func(current_df[target_column])
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    st.session_state.filtered_df = current_df
                    st.session_state.filtered_df[target_column] = processed
                    st.session_state.preprocessing_history = [st.session_state.original_filtered_df.copy()]
                    st.rerun()
                    
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞: {str(e)}")

            # –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
            with st.expander("üìà –ú–µ—Ç–æ–¥—ã –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏"):
                method = st.selectbox("–¢–∏–ø –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏", 
                    options=['linear', 'time', 'spline', 'nearest'],
                    format_func=lambda x: {
                        'linear': '–õ–∏–Ω–µ–π–Ω–∞—è',
                        'time': '–í—Ä–µ–º–µ–Ω–Ω–∞—è',
                        'spline': '–°–ø–ª–∞–π–Ω–æ–≤–∞—è',
                        'nearest': '–ë–ª–∏–∂–∞–π—à–∞—è'
                    }[x])
                
                if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é"):
                    def interpolate(series):
                        return series.interpolate(method=method, order=3 if method == 'spline' else None)
                    
                    apply_method(interpolate)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã
            with st.expander("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã"):
                stat_method = st.radio("–ú–µ—Ç–æ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è",
                    options=['mean', 'median', 'ffill', 'bfill', 'zero'],
                    format_func=lambda x: {
                        'mean': '–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ',
                        'median': '–ú–µ–¥–∏–∞–Ω–∞',
                        'ffill': '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–µ',
                        'bfill': '–°–ª–µ–¥—É—é—â–µ–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–µ',
                        'zero': '–ù—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ'
                    }[x])
                
                if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥"):
                    def fill_na(series):
                        if stat_method in ['mean', 'median']:
                            return series.fillna(series.__getattribute__(stat_method)())
                        elif stat_method == 'zero':
                            return series.fillna(0)
                        return series.fillna(method=stat_method)
                    
                    apply_method(fill_na)

            #TODO: –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
            with st.expander("ü§ñ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ (ARIMA)"):
                if st.button("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ —Å ARIMA"):
                    def arima_fill(series):
                        from statsmodels.tsa.arima.model import ARIMA
                        model = ARIMA(series.dropna(), order=(1,1,1))
                        model_fit = model.fit()
                        return model_fit.predict(start=series.first_valid_index(), 
                                               end=series.last_valid_index())
                    
                    apply_method(arima_fill)
    else:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ")