import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from statsmodels.tsa.seasonal import STL
from pmdarima import auto_arima
from plotly.subplots import make_subplots
import numpy as np

def run_step():
    st.subheader("–®–∞–≥ 2. –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    if st.session_state.filtered_df is not None:
        tab1, tab2, tab3 = st.tabs(["–û–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤", "–î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞"])
        
        with tab1:
            st.write("### üìä –û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö
            st.markdown("**–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:**")
            info_container = st.container(border=True)
            with info_container:
                cols = st.columns(4)
                with cols[0]:
                    st.metric("–°—Ç–æ–ª–±—Ü–æ–≤", len(st.session_state.filtered_df.columns))
                with cols[1]:
                    st.metric("–ù–∞–±–ª—é–¥–µ–Ω–∏–π", len(st.session_state.filtered_df))
                with cols[2]:
                    st.metric("–ü—Ä–æ–ø—É—Å–∫–æ–≤", st.session_state.filtered_df.isnull().sum().sum())
                with cols[3]:
                    st.metric("–î—É–±–ª–∏–∫–∞—Ç—ã", st.session_state.filtered_df.duplicated().sum())

            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
            if st.session_state.target_col in st.session_state.filtered_df.select_dtypes(include='number'):
                st.markdown("---")
                
                stats = st.session_state.filtered_df[st.session_state.target_col].agg([
                    'mean', 'median', 'std', 'min', 'max', 'skew'
                ]).reset_index()
                
                stats.columns = ['–ú–µ—Ç—Ä–∏–∫–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ']
                stats['–ú–µ—Ç—Ä–∏–∫–∞'] = [
                    '–°—Ä–µ–¥–Ω–µ–µ', '–ú–µ–¥–∏–∞–Ω–∞', '–°—Ç–∞–Ω–¥. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ', 
                    '–ú–∏–Ω–∏–º—É–º', '–ú–∞–∫—Å–∏–º—É–º', '–ê—Å–∏–º–º–µ—Ç—Ä–∏—è'
                ]
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
                stats['–ó–Ω–∞—á–µ–Ω–∏–µ'] = stats['–ó–Ω–∞—á–µ–Ω–∏–µ'].apply(
                    lambda x: f"{x:,.2f}" if isinstance(x, (int, float)) else x
                )
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –¥–≤—É—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö
                cols = st.columns([1, 2])
                with cols[0]:
                    st.markdown("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π:**")
                    st.dataframe(
                        stats,
                        use_container_width=True,
                        hide_index=True,
                        height=250
                    )
                
                with cols[1]:
                    try:
                        st.markdown("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π:**")
                        fig = px.histogram(
                            st.session_state.filtered_df,
                            x=st.session_state.target_col,
                            nbins=50,
                            height=320
                        )
                        st.plotly_chart(fig, use_container_width=True)
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã: {str(e)}")

            # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã
            st.markdown("---")
            st.markdown("**‚è∞ –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫**")
            time_container = st.container(border=True)
            with time_container:
                if pd.api.types.is_datetime64_any_dtype(st.session_state.filtered_df[st.session_state.date_col]):
                    dates = st.session_state.filtered_df[st.session_state.date_col]
                    
                    cols = st.columns(4)
                    with cols[0]:
                        st.metric("–ü–µ—Ä–≤–∞—è –¥–∞—Ç–∞", dates.min().strftime('%d.%m.%Y'))
                    with cols[1]:
                        st.metric("–ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞", dates.max().strftime('%d.%m.%Y'))
                    with cols[2]:
                        delta = dates.max() - dates.min()
                        st.metric("–ü–µ—Ä–∏–æ–¥ –ø–æ–∫—Ä—ã—Ç–∏—è", f"{delta.days} –¥–Ω–µ–π")
                    with cols[3]:
                        freq = pd.infer_freq(dates)
                        freq_map = {
                            'D': '–î–Ω–µ–≤–Ω–∞—è',
                            'M': '–ú–µ—Å—è—á–Ω–∞—è',
                            'Y': '–ì–æ–¥–æ–≤–∞—è',
                            'H': '–ü–æ—á–∞—Å–æ–≤–∞—è',
                            None: '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'
                        }
                        st.session_state.freq = freq
                        st.metric("–ß–∞—Å—Ç–æ—Ç–∞", freq_map.get(freq, freq))
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –¥–∞—Ç
                    try:
                        full_range = pd.date_range(start=dates.min(), end=dates.max(), freq=freq)
                        missing = full_range.difference(dates)
                        st.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(missing)} –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫") if len(missing) > 0 else st.success("–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                    except:
                        st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞")
                      
        with tab2:
            st.write("### üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
            if st.session_state.original_missing is not None:
                plot_df = st.session_state.filtered_df.copy()
                date_col = st.session_state.date_col
                target_col = st.session_state.target_col
                
                try:
                    plot_df[date_col] = pd.to_datetime(plot_df[date_col])
                    plot_df = plot_df.sort_values(date_col)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∏
                    plot_df['filled'] = np.where(
                        st.session_state.original_missing & ~plot_df[target_col].isna(),
                        plot_df[target_col],
                        np.nan
                    )
                    
                    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
                    fig = px.line(
                        plot_df,
                        x=date_col,
                        y=target_col,
                        title=f"–î–∏–Ω–∞–º–∏–∫–∞ {target_col}",
                        labels={date_col: "–î–∞—Ç–∞", target_col: "–ó–Ω–∞—á–µ–Ω–∏–µ"},
                        line_shape='linear',
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                    if not plot_df['filled'].isna().all():
                        fig.add_trace(go.Scatter(
                            x=plot_df[date_col],
                            y=plot_df['filled'],
                            mode='markers',
                            marker=dict(
                                color='red',
                                size=6,
                                line=dict(width=1, color='darkred')
                            ),
                            name='–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∏',
                            hoverinfo='y'
                        ))
                    
                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–µ–≥–µ–Ω–¥—ã
                    fig.update_layout(
                        hovermode="x unified",
                        legend=dict(
                            orientation="h",
                            yanchor="bottom",
                            y=1.02,
                            xanchor="right",
                            x=1
                        ),
                        margin=dict(l=20, r=20, t=40, b=20),
                        height=500
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")

            # –û–±—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            total_missing = st.session_state.filtered_df[st.session_state.target_col].isnull().sum()
            st.markdown(f"**–¢–µ–∫—É—â–∏–µ –ø—Ä–æ–ø—É—Å–∫–∏:** `{total_missing}`")
            
            # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
            if st.session_state.preprocessing_history:
                if st.button("‚è™ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
                    st.session_state.filtered_df = st.session_state.original_filtered_df.copy()
                    st.session_state.preprocessing_history = [st.session_state.original_filtered_df.copy()]
                    st.rerun()

            # –ú–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
            st.write("### üß© –ú–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤")
            target_column = st.session_state.target_col
            
            def apply_method(method_func):
                """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ—Ç–æ–¥–æ–≤"""
                try:
                    # –°–±—Ä–æ—Å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
                    current_df = st.session_state.original_filtered_df.copy()
                    
                    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞
                    processed = method_func(current_df[target_column])
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    st.session_state.filtered_df = current_df
                    st.session_state.filtered_df[target_column] = processed
                    st.session_state.preprocessing_history = [st.session_state.original_filtered_df.copy()]
                    st.rerun()
                    
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞: {str(e)}")

            # –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
            with st.expander("üìà –ú–µ—Ç–æ–¥—ã –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏"):
                method = st.selectbox("–¢–∏–ø –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏", 
                    options=['linear', 'time', 'spline', 'nearest'],
                    format_func=lambda x: {
                        'linear': '–õ–∏–Ω–µ–π–Ω–∞—è',
                        'time': '–í—Ä–µ–º–µ–Ω–Ω–∞—è',
                        'spline': '–°–ø–ª–∞–π–Ω–æ–≤–∞—è',
                        'nearest': '–ë–ª–∏–∂–∞–π—à–∞—è'
                    }[x])
                
                if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é"):
                    def interpolate(series):
                        return series.interpolate(method=method, order=3 if method == 'spline' else None)
                    
                    apply_method(interpolate)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã
            with st.expander("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã"):
                stat_method = st.radio("–ú–µ—Ç–æ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è",
                    options=['mean', 'median', 'ffill', 'bfill', 'zero'],
                    format_func=lambda x: {
                        'mean': '–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ',
                        'median': '–ú–µ–¥–∏–∞–Ω–∞',
                        'ffill': '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–µ',
                        'bfill': '–°–ª–µ–¥—É—é—â–µ–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–µ',
                        'zero': '–ù—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ'
                    }[x])
                
                if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥"):
                    def fill_na(series):
                        if stat_method in ['mean', 'median']:
                            return series.fillna(series.__getattribute__(stat_method)())
                        elif stat_method == 'zero':
                            return series.fillna(0)
                        return series.fillna(method=stat_method)
                    
                    apply_method(fill_na)

            #TODO: –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
            with st.expander("ü§ñ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ (SARIMAX)"):
                st.markdown("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏**")
                cols = st.columns(3)
                with cols[0]:
                    use_seasonality = st.checkbox(
                        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å",
                        value=hasattr(st.session_state, 'seasonality_type')
                    )
                with cols[1]:
                    max_order = st.number_input("–ú–∞–∫—Å. –ø–æ—Ä—è–¥–æ–∫", 1, 5, 3)
                with cols[2]:
                    max_iter = st.number_input("–ú–∞–∫—Å. –∏—Ç–µ—Ä–∞—Ü–∏–π", 50, 200, 100)
                
                if st.button("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ —Å SARIMAX"):
                    def sarimax_fill(series):
                        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
                        seasonal = False
                        m = 1
                        if use_seasonality and hasattr(st.session_state, 'seasonal_period'):
                            seasonal = True
                            m = st.session_state.seasonal_period
                        
                        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
                        model = auto_arima(
                            series.dropna(),
                            seasonal=seasonal,
                            m=m,
                            max_order=max_order,
                            max_iter=max_iter,
                            suppress_warnings=True,
                            trace=True
                        )
                        
                        # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                        pred = model.predict_in_sample()
                        return pd.Series(pred, index=series.index)
                    apply_method(sarimax_fill)
        with tab3:
            st.write("### üìâ STL-–î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞")
            
            if st.session_state.filtered_df is None:
                st.warning("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
                st.stop()

            # –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö
            df = st.session_state.filtered_df.copy()
            date_col = st.session_state.date_col
            target_col = st.session_state.target_col

            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–ª–æ–Ω–æ–∫
                if date_col not in df.columns or target_col not in df.columns:
                    raise KeyError(f"–ö–æ–ª–æ–Ω–∫–∏ {date_col} –∏–ª–∏ {target_col} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω–¥–µ–∫—Å–∞
                df[date_col] = pd.to_datetime(df[date_col])
                temp_df = df.set_index(date_col).copy()
                
                # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
                FREQ_TO_PERIOD = {
                    'D': 7,    # daily -> weekly seasonality
                    'W': 52,   # weekly -> yearly seasonality
                    'M': 12,   # monthly -> yearly seasonality
                    'Q': 4,    # quarterly -> yearly seasonality
                    'Y': 1,    # yearly (no seasonality)
                    'H': 24,   # hourly -> daily seasonality
                    None: None # fallback
                }

                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö
                if 'freq' not in st.session_state:
                    try:
                        inferred_freq = pd.infer_freq(temp_df.index)
                        st.session_state.freq = inferred_freq[0] if inferred_freq else None
                    except:
                        st.session_state.freq = None

                # –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å—Ç–æ—Ç—ã –∏ –ø–µ—Ä–∏–æ–¥–∞
                if not st.session_state.freq or st.session_state.freq not in FREQ_TO_PERIOD:
                    with st.expander("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏", expanded=True):
                        cols = st.columns(2)
                        with cols[0]:
                            new_freq = st.selectbox(
                                "–ß–∞—Å—Ç–æ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:",
                                options=['D', 'W', 'M', 'Q', 'Y', 'H'],
                                index=0
                            )
                        with cols[1]:
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —á–∞—Å—Ç–æ—Ç—ã
                            default_period = FREQ_TO_PERIOD[new_freq]
                            custom_period = st.number_input(
                                "–ü–µ—Ä–∏–æ–¥ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏:",
                                value=default_period if default_period else 1,
                                min_value=1,
                                step=1,
                                help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –≤ –æ–¥–Ω–æ–º —Å–µ–∑–æ–Ω–Ω–æ–º —Ü–∏–∫–ª–µ"
                            )
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                        if st.button("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"):
                            st.session_state.freq = new_freq
                            FREQ_TO_PERIOD[new_freq] = custom_period  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å
                            st.rerun()
                    
                    st.stop()  # –ù–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞
                seasonal_period = FREQ_TO_PERIOD[st.session_state.freq]
                if not seasonal_period:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–µ—Ä–∏–æ–¥ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —á–∞—Å—Ç–æ—Ç—ã")
                    st.stop()

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤
                if temp_df[target_col].isnull().sum() > 0:
                    st.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–ø—É—Å–∫–∏! –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–µ–π.")
                    if st.button("üîÑ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ –ª–∏–Ω–µ–π–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–µ–π"):
                        temp_df[target_col] = temp_df[target_col].interpolate(method='linear')
                        st.session_state.filtered_df = temp_df.reset_index()
                        st.success("–ü—Ä–æ–ø—É—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!")
                        st.rerun()
                    st.stop()

                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
                with st.expander("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã STL", expanded=True):
                    cols = st.columns(3)
                    with cols[0]:
                        seasonal_smoothing = st.number_input(
                            "–°–µ–∑–æ–Ω–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ (seasonal)",
                            value=7,
                            min_value=3,
                            step=2,
                            help="–ù–µ—á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ ‚â•3"
                        )
                    with cols[1]:
                        trend_smoothing = st.number_input(
                            "–¢—Ä–µ–Ω–¥–æ–≤–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ (trend)",
                            value=13,
                            min_value=3,
                            step=2,
                            help="–ù–µ—á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ ‚â•3"
                        )
                    with cols[2]:
                        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç low_pass
                        min_low_pass = seasonal_period + (1 if seasonal_period%2 == 0 else 2)
                        low_pass_smoothing = st.number_input(
                            "–ù–∏–∑–∫–æ—á–∞—Å—Ç–æ—Ç–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ (low_pass)",
                            value=min_low_pass,
                            min_value=min_low_pass,
                            step=2,
                            help=f"–ù–µ—á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ > –ø–µ—Ä–∏–æ–¥–∞ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ ({seasonal_period})"
                        )

                # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                if low_pass_smoothing <= seasonal_period:
                    st.error(f"low_pass ({low_pass_smoothing}) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > –ø–µ—Ä–∏–æ–¥–∞ ({seasonal_period})")
                    st.stop()
                if any([v%2 == 0 for v in [seasonal_smoothing, trend_smoothing, low_pass_smoothing]]):
                    st.error("–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ—á–µ—Ç–Ω—ã–º–∏")
                    st.stop()

                # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
                decomposition_type = st.radio(
                    "–¢–∏–ø –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏:",
                    ["additive", "multiplicative"],
                    horizontal=True,
                    help="–î–ª—è –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—Ä–æ–≤–∞–Ω–∏–µ"
                )

                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞
                ts = temp_df[target_col].ffill().dropna()
                if decomposition_type == "multiplicative":
                    if (ts <= 0).any():
                        st.error("–ú—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å —Ç—Ä–µ–±—É–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
                        st.stop()
                    ts = np.log(ts)

                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ STL-–¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
                stl = STL(
                    ts,
                    period=seasonal_period,
                    seasonal=seasonal_smoothing,
                    trend=trend_smoothing,
                    low_pass=low_pass_smoothing,
                    robust=True
                ).fit()

                # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
                if decomposition_type == "multiplicative":
                    trend = np.exp(stl.trend)
                    seasonal = np.exp(stl.seasonal) - 1
                    resid = np.exp(stl.resid) - 1
                    original = np.exp(ts)
                else:
                    trend = stl.trend
                    seasonal = stl.seasonal
                    resid = stl.resid
                    original = ts

                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                fig = make_subplots(
                    rows=4,
                    cols=1,
                    shared_xaxes=True,
                    vertical_spacing=0.05,
                    subplot_titles=(
                        "–ò—Å—Ö–æ–¥–Ω—ã–π —Ä—è–¥",
                        "–¢—Ä–µ–Ω–¥",
                        "–°–µ–∑–æ–Ω–Ω–∞—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞",
                        "–û—Å—Ç–∞—Ç–∫–∏"
                    )
                )

                components = [
                    (original, '–ò—Å—Ö–æ–¥–Ω—ã–π —Ä—è–¥', '#1f77b4'),
                    (trend, '–¢—Ä–µ–Ω–¥', '#ff7f0e'),
                    (seasonal, '–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å', '#2ca02c'),
                    (resid, '–û—Å—Ç–∞—Ç–∫–∏', '#d62728')
                ]

                for i, (data, name, color) in enumerate(components, 1):
                    fig.add_trace(
                        go.Scatter(
                            x=data.index,
                            y=data,
                            name=name,
                            line=dict(color=color),
                            showlegend=False
                        ),
                        row=i, col=1
                    )

                fig.update_layout(
                    height=800,
                    margin=dict(l=50, r=50, b=50, t=50),
                    hovermode="x unified"
                )

                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–ø–∏—Å–µ–π –æ—Å–µ–π
                yaxis_titles = ["–ó–Ω–∞—á–µ–Ω–∏–µ", "–¢—Ä–µ–Ω–¥", "–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å", "–û—Å—Ç–∞—Ç–∫–∏"]
                for i, title in enumerate(yaxis_titles, 1):
                    fig.update_yaxes(title_text=title, row=i, col=1)
                fig.update_xaxes(title_text="–î–∞—Ç–∞", row=4, col=1)

                st.plotly_chart(fig, use_container_width=True)

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                with st.expander("üìå –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç"):
                    st.markdown("""
                    - **–¢—Ä–µ–Ω–¥**: –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ —Ä—è–¥–∞
                    - **–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å**: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–µ–±–∞–Ω–∏—è —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —á–∞—Å—Ç–æ—Ç–æ–π
                    - **–û—Å—Ç–∞—Ç–∫–∏**: –°–ª—É—á–∞–π–Ω–∞—è —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞ –∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
                    """)

            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏: {str(e)}")
                st.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö")
            
    else:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ")